# general settings
name: DFDAN_8block_56channel_l1_1000k_DF2K_x4
model_type: SRModel
scale: 4
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0
# python basicsr/train.py -opt options/train/train_DFDAN_x4.yml --auto_resume
# dataset and data loader settings
datasets:
  train:
    name: DF2K
    type: PairedImageDataset
    #dataroot_gt: datasets/DIV2K/DIV2K_train_HR_sub
    #dataroot_lq: datasets/DIV2K/DIV2K_train_LR_bicubic/X4_sub
    # (for lmdb)
    dataroot_gt: datasets/DF2K/DF2K_HRmod12_sub.lmdb
    dataroot_lq: datasets/DF2K/DF2K_LRmod12x4_sub.lmdb
    filename_tmpl: '{}'
    io_backend:
      #type: disk
      # (for lmdb)
      type: lmdb

    gt_size: 256    # 64*64 LR input
    use_hflip: true
    use_rot: true

    # data loader
    num_worker_per_gpu: 14
    batch_size_per_gpu: 64
    dataset_enlarge_ratio: 10
    prefetch_mode: cuda
    pin_memory: true

  val:
    name: set5
    type: PairedImageDataset
    dataroot_gt: datasets/set5/mod4/GT
    dataroot_lq: datasets/set5/mod4/LRx4
    io_backend:
      type: disk


# network structures
network_g:
  type: DFDAN
  in_channels: 3
  channels: 56
  num_block: 8
  out_channels: 3
  upscale: 4

# path
path:
  pretrain_network_g: experiments/pretrained_models/DFDAN_x2.pth
  strict_load_g: false
  resume_state: ~
  
# If you want to train the x4 SR model directly from scratch, you can change the code like following:
#path:
#  pretrain_network_g: ~
#  strict_load_g: true
#  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-3
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: CosineAnnealingRestartLR
    periods: [500000]    # [10000000] for training the x4 SR model directly from scratch
    restart_weights: [1]
    eta_min: !!float 1e-4    # !!float 1e-6 for training the x4 SR model directly from scratch

  total_iter: 500000    # 10000000 for training the x4 SR model directly from scratch
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: L1Loss
    loss_weight: 1.0
    reduction: mean

# validation settings
val:
  val_freq: !!float 5e3
  save_img: true

  metrics:
    PSNR: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 4
      test_y_channel: true
      better: higher
    SSIM:
      type: calculate_ssim
      crop_border: 4
      test_y_channel: true
      better: higher

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
